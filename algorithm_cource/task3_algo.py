u"""
Обработка сетевых пакетов
    Реализовать обработчик сетевых пакетов.
Вход.
    Размер буфера size и число пакетов n, а так- же две последовательности arrival1, . . . , arrivaln и
    duration1, . . . , durationn, обозначающих время поступ- ления и длительность обработки n пакетов.
Выход.
    Для каждого из данных n пакетов необходимо вывести время начала его обработки или −1,
    если пакет не был обработан (это происходит в случае, когда пакет поступает в момент,
    когда в буфере компьютера уже находится size пакетов).

Формат входа.
    Первая строка входа содержит размер буфера size и число пакетов n.
    Каждая из следующих n строк содержит два числа: время arrivali прибытия i-го пакета и время durationi,
    необходимое на его обработку. Гарантируется, что arrival1 ≤ arrival2 ≤ · · · ≤ arrivaln.
    При этом может оказаться, что arrivali−1 = arrivali.
    В таком случае считаем, что пакет i − 1 по- ступил раньше пакета i.
Формат выхода.
    Для каждого из n пакетов выведите время, когда процессор начал его обрабатывать, или −1, если пакет был от- брошен.
Ограничения.
    Все числа во входе целые. 1 ≤ size ≤ 105; 0 ≤ n ≤ 105; 0 ≤ arrivali ≤ 106;
    0 ≤ durationi ≤ 103; arrivali ≤ arrivali+1 для всех 1 ≤ i ≤ n − 1.
"""
import sys
#
# size, n = list(map(lambda x: int(x), input().split(' ')))
#
# q = str()
#
# for line in sys.stdin:
#     if '' == line.rstrip():
#         break
#     q += line


def network(size_n, q):
    size, n = size_n[0], size_n[1]
    buffer, trash, proc = [], [], []
    t_0, t_end = 0, 0

    packages = [tuple(int(k) for k in (el.split())) for el in q.split('\n') if q]

    for m, k in enumerate(packages[:n:]):

        if not buffer:
            t_0 = k[0]
            t_end = k[0] + k[1]
            if size != 0:
                buffer.append((t_0, t_end))
            else:
                return ''
        elif len(buffer) <= size:
            if k[0] == t_end:
                t_0 = k[0]
                buffer.append((t_end, k[0] + k[1]))
                t_end = k[0] + k[1]
                proc.append(buffer.pop(0)[0])

            elif k[0] < t_end:
                t_0 = k[0]

                while buffer[0][1] <= t_0:
                    proc.append(buffer.pop(0)[0])
                if len(buffer) < size:
                    buffer.append((t_end, k[1] + t_end))
                    t_end = t_end + k[1]
                else:
                    trash.append(m)

            elif k[0] > t_end:
                while len(buffer) != 0:
                    proc.append(buffer.pop(0)[0])
                t_0 = k[0]
                buffer.append((t_0, k[0] + k[1]))
                t_end = k[0] + k[1]

    while len(buffer) != 0:
        proc.append(buffer.pop(0)[0])

    for _ in trash:
        proc.insert(_, -1)

    sys.stdout.write(' '.join(list(map(lambda x: str(x), proc))))
    sys.stdout.write('\n')

    return ' '.join(list(map(lambda x: str(x), proc)))


test_input = {
    ((1, 25),
     '15 23\n24 44\n39 43\n48 15\n56 6\n56 8\n56 29\n56 28\n56 4\n56 17\n68 44\n75 22\n75 34\n84 46\n84 21\n'
     '84 25\n97 31\n105 34\n105 43\n117 17\n129 12\n142 47\n144 22\n144 18\n152 9'):
    '15 -1 39 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 84 -1 -1 -1 -1 -1 -1 -1 142 -1 -1 -1',
    ((7, 25),
     '0 21\n10 35\n10 12\n21 13\n35 11\n35 14\n51 49\n59 33\n59 43\n67 42\n80 14\n93 45\n93 38\n100 8\n'
     '101 31\n108 46\n123 22\n127 20\n139 7\n142 43\n142 12\n142 25\n154 25\n154 5\n154 42'):
    '0 21 56 68 81 92 106 155 188 -1 231 245 290 -1 -1 328 -1 -1 -1 -1 -1 -1 -1 -1 -1',
    ((11, 25),
     '11 45\n26 22\n38 24\n42 49\n48 39\n59 3\n67 1\n76 5\n84 30\n89 37\n99 12\n111 6\n125 33\n132 20\n'
     '147 16\n160 7\n174 15\n185 14\n198 9\n200 37\n208 18\n222 3\n237 28\n248 10\n263 11'):
    '11 56 78 102 151 190 193 194 199 229 266 278 284 317 -1 337 -1 -1 344 353 390 408 411 -1 -1',
    ((12, 25),
     '5 11\n10 14\n25 17\n41 22\n54 36\n70 13\n81 8\n90 12\n103 21\n115 38\n124 18\n138 15\n142 13\n'
     '155 31\n168 0\n177 49\n186 8\n196 30\n206 37\n217 49\n232 31\n247 25\n260 31\n268 36\n279 8'):
    '5 16 30 47 69 105 118 126 138 159 197 215 230 243 274 274 323 331 361 398 447 478 503 534 570',
    ((13, 25),
     '10 37\n20 45\n29 24\n31 17\n38 43\n49 30\n59 12\n72 28\n82 45\n91 10\n107 46\n113 4\n128 16\n139 1\n'
     '149 41\n163 0\n172 22\n185 1\n191 17\n201 3\n209 11\n223 30\n236 17\n252 42\n262 0'):
    '10 47 92 116 133 176 206 218 246 291 301 347 351 367 368 409 409 431 -1 -1 432 443 -1 473 -1',
    ((11, 25),
     '6 23\n15 44\n24 28\n25 15\n33 7\n47 41\n58 25\n65 5\n70 14\n79 8\n93 43\n103 11\n110 25\n123 27\n'
     '138 40\n144 19\n159 2\n167 23\n179 43\n182 31\n186 7\n198 16\n208 41\n222 23\n235 26'):
    '6 29 73 101 116 123 164 189 194 208 216 259 270 295 322 362 -1 381 -1 -1 -1 404 420 461 484',
    ((1, 25),
     '16 0\n29 3\n44 6\n58 0\n72 2\n88 8\n95 7\n108 6\n123 9\n139 6\n152 6\n157 3\n169 3\n183 1\n192 0\n'
     '202 8\n213 8\n229 3\n232 3\n236 3\n239 4\n247 8\n251 2\n267 7\n275 7'):
    '16 29 44 58 72 88 -1 108 123 139 152 -1 169 183 192 202 213 229 232 236 239 247 -1 267 275',
    ((3, 8),
     '1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8'):
    '1 2 4 7 11 -1 16 -1',
    ((2, 8),
     '0 0\n0 0\n0 0\n1 0\n1 0\n1 1\n1 2\n1 3'):
    '0 0 0 1 1 1 2 -1',
    ((2, 6),
     '0 2\n0 0\n2 0\n3 0\n4 0\n5 0'):
    '0 2 2 3 4 5',
    ((3, 6),
     '0 7\n0 0\n2 0\n3 3\n4 4\n 5 5'):
    '0 7 7 -1 -1 -1',
    ((1, 2),
     '0 1\n0 1'):
    '0 -1',
    ((0, 2),
     '0 1\n0 1'):
    ''
}


def test_method(i, o):
    assert network(i[0], i[1]) == o


for i, o in test_input.items():
    test_method(i, o)
